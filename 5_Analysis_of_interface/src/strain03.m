function [sStrain] = strain03(sStrain)

% Colin Ophus - 2022 April 2
% This set of scripts calculates 3D strain tensors for pentagonal bipyramid
% (PB) structures.  Uses shared lattice vectors between twin planes.

% 04 - calculate the strain tensors by differentiating the displacements.

sStrain.mask_range = [0.5 0.6];  % relative to median value for density
% sStrain.mask_range = [0.7 0.8];  % relative to median value for density

% init
% 10 entries:
% 1-3 exx eyy ezz
% 4-6 exy exz eyz
% 7-9 t_z t_y t_x
% 10 - mask
sStrain.vol_strain = zeros( ...
    sStrain.vol_size(1),...
    sStrain.vol_size(2),...
    sStrain.vol_size(3),...
    9 + 1,...
    5);
sStrain.vol_strain_combined = zeros( ...
    sStrain.vol_size(1),...
    sStrain.vol_size(2),...
    sStrain.vol_size(3),...
    9 + 1);
sStrain.vol_strain_global = zeros( ...
    sStrain.vol_size(1),...
    sStrain.vol_size(2),...
    sStrain.vol_size(3),...
    9 + 1);


% Main loop
for a0 = 1:5
    % Make mask
    mask = (sStrain.vol_disp(:,:,:,4,a0) - sStrain.mask_range(1)) ...
        / (sStrain.mask_range(2) - sStrain.mask_range(1));
    mask(:) = min(max(mask,0),1);
    sStrain.vol_strain(:,:,:,10,a0) = mask;
    
    % derivatives
    dxdx = (circshift(sStrain.vol_disp(:,:,:,1,a0),[-1  0  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,1,a0),[ 1  0  0])) ...
        / (2*sStrain.voxel_size);
    dydx = (circshift(sStrain.vol_disp(:,:,:,2,a0),[-1  0  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,2,a0),[ 1  0  0])) ...
        / (2*sStrain.voxel_size);
    dzdx = (circshift(sStrain.vol_disp(:,:,:,3,a0),[-1  0  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,3,a0),[ 1  0  0])) ...
        / (2*sStrain.voxel_size);
    
    dxdy = (circshift(sStrain.vol_disp(:,:,:,1,a0),[ 0 -1  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,1,a0),[ 0  1  0])) ...
        / (2*sStrain.voxel_size);
    dydy = (circshift(sStrain.vol_disp(:,:,:,2,a0),[ 0 -1  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,2,a0),[ 0  1  0])) ...
        / (2*sStrain.voxel_size);
    dzdy = (circshift(sStrain.vol_disp(:,:,:,3,a0),[ 0 -1  0]) ...
        -   circshift(sStrain.vol_disp(:,:,:,3,a0),[ 0  1  0])) ...
        / (2*sStrain.voxel_size);
    
    dxdz = (circshift(sStrain.vol_disp(:,:,:,1,a0),[ 0  0 -1]) ...
        -   circshift(sStrain.vol_disp(:,:,:,1,a0),[ 0  0  1])) ...
        / (2*sStrain.voxel_size);
    dydz = (circshift(sStrain.vol_disp(:,:,:,2,a0),[ 0  0 -1]) ...
        -   circshift(sStrain.vol_disp(:,:,:,2,a0),[ 0  0  1])) ...
        / (2*sStrain.voxel_size);
    dzdz = (circshift(sStrain.vol_disp(:,:,:,3,a0),[ 0  0 -1]) ...
        -   circshift(sStrain.vol_disp(:,:,:,3,a0),[ 0  0  1])) ...
        / (2*sStrain.voxel_size);
    
    % principle strains
    sStrain.vol_strain(:,:,:,1,a0) = dxdx;
    sStrain.vol_strain(:,:,:,2,a0) = dydy;
    sStrain.vol_strain(:,:,:,3,a0) = dzdz;
    
    % shear strains
    sStrain.vol_strain(:,:,:,4,a0) = (dydx + dxdy) / 2;
    sStrain.vol_strain(:,:,:,5,a0) = (dzdx + dxdz) / 2;
    sStrain.vol_strain(:,:,:,6,a0) = (dzdy + dydz) / 2;
    
    % infinitestimal rotations
    sStrain.vol_strain(:,:,:,7,a0) = (dydx - dxdy) / 2;
    sStrain.vol_strain(:,:,:,8,a0) = (dzdx - dxdz) / 2;
    sStrain.vol_strain(:,:,:,9,a0) = (dzdy - dydz) / 2;
end


% Generate combined strain maps for fcc
mask_total = sum(sStrain.vol_strain(:,:,:,10,:),5);
sub = mask_total > 0.01;
mask_sub = mask_total(sub);
for a0 = 1:9
    sig_combined = sum( ...
        sStrain.vol_strain(:,:,:,a0,:) .* ...
        sStrain.vol_strain(:,:,:,10,:),5);
    sig_combined(sub) = sig_combined(sub) ./ mask_sub;
    sig_combined(~sub) = 0;
    sStrain.vol_strain_combined(:,:,:,a0) = sig_combined;
end
sStrain.vol_strain_combined(:,:,:,10) = min(mask_total,1);

% strain maps for global lattice fits
% Make mask
mask = (sStrain.vol_disp_global(:,:,:,4) - sStrain.mask_range(1)) ...
    / (sStrain.mask_range(2) - sStrain.mask_range(1));
mask(:) = min(max(mask,0),1);
sStrain.vol_strain_global(:,:,:,10) = mask;

% figure(678)
% clf
% imagesc(mask(:,:,71))
% colorbar
% % imagesc(sStrain.vol_disp_global(:,:,71,1))

% derivatives
dxdx = (circshift(sStrain.vol_disp_global(:,:,:,1),[-1  0  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,1),[ 1  0  0])) ...
    / (2*sStrain.voxel_size);
dydx = (circshift(sStrain.vol_disp_global(:,:,:,2),[-1  0  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,2),[ 1  0  0])) ...
    / (2*sStrain.voxel_size);
dzdx = (circshift(sStrain.vol_disp_global(:,:,:,3),[-1  0  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,3),[ 1  0  0])) ...
    / (2*sStrain.voxel_size);

dxdy = (circshift(sStrain.vol_disp_global(:,:,:,1),[ 0 -1  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,1),[ 0  1  0])) ...
    / (2*sStrain.voxel_size);
dydy = (circshift(sStrain.vol_disp_global(:,:,:,2),[ 0 -1  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,2),[ 0  1  0])) ...
    / (2*sStrain.voxel_size);
dzdy = (circshift(sStrain.vol_disp_global(:,:,:,3),[ 0 -1  0]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,3),[ 0  1  0])) ...
    / (2*sStrain.voxel_size);

dxdz = (circshift(sStrain.vol_disp_global(:,:,:,1),[ 0  0 -1]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,1),[ 0  0  1])) ...
    / (2*sStrain.voxel_size);
dydz = (circshift(sStrain.vol_disp_global(:,:,:,2),[ 0  0 -1]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,2),[ 0  0  1])) ...
    / (2*sStrain.voxel_size);
dzdz = (circshift(sStrain.vol_disp_global(:,:,:,3),[ 0  0 -1]) ...
    -   circshift(sStrain.vol_disp_global(:,:,:,3),[ 0  0  1])) ...
    / (2*sStrain.voxel_size);

% principle strains
sStrain.vol_strain_global(:,:,:,1) = dxdx;
sStrain.vol_strain_global(:,:,:,2) = dydy;
sStrain.vol_strain_global(:,:,:,3) = dzdz;

% shear strains
sStrain.vol_strain_global(:,:,:,4) = (dydx + dxdy) / 2;
sStrain.vol_strain_global(:,:,:,5) = (dzdx + dxdz) / 2;
sStrain.vol_strain_global(:,:,:,6) = (dzdy + dydz) / 2;

% infinitestimal rotations
sStrain.vol_strain_global(:,:,:,7) = (dydx - dxdy) / 2;
sStrain.vol_strain_global(:,:,:,8) = (dzdx - dxdz) / 2;
sStrain.vol_strain_global(:,:,:,9) = (dzdy - dydz) / 2;

% quick plotting
figure(56)
clf

ind = 71;

Ip1 = [ ...
    sStrain.vol_strain_combined(:,:,ind,1) ...
    sStrain.vol_strain_combined(:,:,ind,2) ...
    sStrain.vol_strain_combined(:,:,ind,3);
    ...
    sStrain.vol_strain_combined(:,:,ind,4) ...
    sStrain.vol_strain_combined(:,:,ind,5) ...
    sStrain.vol_strain_combined(:,:,ind,6);
    ...
    sStrain.vol_strain_combined(:,:,ind,7) ...
    sStrain.vol_strain_combined(:,:,ind,8) ...
    sStrain.vol_strain_combined(:,:,ind,9) ...
    ...
    ] .* repmat(sStrain.vol_strain_combined(:,:,ind,10),[3 3]);

Ip2 = [ ...
    sStrain.vol_strain_global(:,:,ind,1) ...
    sStrain.vol_strain_global(:,:,ind,2) ...
    sStrain.vol_strain_global(:,:,ind,3);
    ...
    sStrain.vol_strain_global(:,:,ind,4) ...
    sStrain.vol_strain_global(:,:,ind,5) ...
    sStrain.vol_strain_global(:,:,ind,6);
    ...
    sStrain.vol_strain_global(:,:,ind,7) ...
    sStrain.vol_strain_global(:,:,ind,8) ...
    sStrain.vol_strain_global(:,:,ind,9) ...
    ...
    ] .* repmat(sStrain.vol_strain_global(:,:,ind,10),[3 3]);
max(Ip2(:))

imagesc([Ip1 Ip2])

axis equal off

caxis([-1 1]*0.02)
colormap(turbo)
set(gca,'position',[0 0 1 1])


end

