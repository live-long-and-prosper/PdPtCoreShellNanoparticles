function [] = strain04(sStrain, flag_use_fcc)
arguments
    sStrain struct
    flag_use_fcc(1,1) logical {mustBeNonnegative} = 1
end
% Colin Ophus - 2022 April 2
% modified by Zezhou Li - 2022 Oct
% This set of scripts calculates 3D strain tensors for pentagonal bipyramid
% (PB) structures.  Uses shared lattice vectors between twin planes.

% 05 - plot the strain tensor, sliced along z

% FCC or global lattice fits
% flag_use_fcc = true; 
% flag_use_fcc = false; 

cmap = turbo(256);
strain_range = [-1 1]*0.025;
rotation_range = [-1 1]*0.8*pi/180;

% z slice - plot range
z_slices = [ ...
    111     51   150;
    91      21   180;
    71      11   190;
    51      21   180;
    31      51   150;];

dx = z_slices(:,3) - z_slices(:,2) + 1;
x_count = 0;


% Generate output images
N = size(sStrain.vol_strain);
Nz = size(z_slices,1);
Nc = size(cmap,1);
% im_size = [N(1)*Nz N(2)*9 3];
im_size = [sum(dx) N(2)*9 3];
im_all = zeros(im_size);

% Generate image for figure
for ax = 1:Nz
    %     x_inds = (1:N(1)) + (ax-1)*N(1);
    x_in = z_slices(ax,2):z_slices(ax,3);
    x_out = (1:dx(ax)) + x_count;
    x_count = x_count + dx(ax);
    
    z_ind = z_slices(ax,1);
    if flag_use_fcc
        mask = sStrain.vol_strain_combined(x_in,:,z_ind,10);
    else
        mask = sStrain.vol_strain_global(x_in,:,z_ind,10);        
    end
    
    for ay = 1:9
        y_inds = (1:N(2)) + (ay-1)*N(2);
        
        if flag_use_fcc
            im = sStrain.vol_strain_combined(x_in,:,z_ind,ay);
        else
            im = sStrain.vol_strain_global(x_in,:,z_ind,ay);            
        end
        
        if ay <= 6
            im(:) = (im - strain_range(1)) ...
                / (strain_range(2) - strain_range(1));
        else
            im(:) = (im - rotation_range(1)) ...
                / (rotation_range(2) - rotation_range(1));
        end
        im(:) = min(max(im,0),1);
        
        % RGB image
        im_rgb = ind2rgb(round(im*(Nc-1))+1,cmap);
        
        % apply mask
        im_rgb = im_rgb.*mask + (1-mask);
        
        % Output
        im_all(x_out,y_inds,:) = im_rgb;
        
        
    end
end




figure(31)
clf
set(gcf,'color',[1 1 1])
% set(gcf,'outerposition',[800   200   576+1024   512+512])
set(gcf,'outerposition',[800   200   576+1024   512+256+64])

axes('position',[0 0 1.0 0.9])
imagesc(im_all)

t = { ...
    [char(949) '_{xx}'],[char(949) '_{xx}'],[char(949) '_{xx}'],...
    [char(949) '_{xy}'],[char(949) '_{xz}'],[char(949) '_{yz}'],...
    '\theta_z','\theta_y','\theta_x'};
% x0 = -5;
x0 = -18;
for a0 = 1:9
%     y0 = (a0-0.8)*N(2);
    y0 = (a0-0.5)*N(2);
    
    text(y0,x0,t{a0},...
        'fontsize',16,...
        'color','k',...
        'interpreter','tex',...
        'horizontalalign','center') 
    
end
axis equal off

% Legends
im_leg = repmat(reshape(cmap,[1 Nc 3]),[16 1]);


for a0 = 1:3
    axes('position',[0/3+0.05+(a0-1)*(1/3) 0.91 1/3-2*0.05 0.05])
    imagesc(im_leg)
    axis equal off
    
    if a0 == 1
        text( ...
            Nc*1/2,...
            -12,...
            'Principal Strains',...
            'fontsize',16,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            -18,...
            8,...
            [num2str(strain_range(1)*100) '%'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            Nc+18,...
            8,...
            [num2str(strain_range(2)*100) '%'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        
    elseif a0 == 2
        text( ...
            Nc*1/2,...
            -12,...
            'Shear Strains',...
            'fontsize',16,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            -18,...
            8,...
            [num2str(strain_range(1)*100) '%'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            Nc+18,...
            8,...
            [num2str(strain_range(2)*100) '%'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        
        
        
    elseif a0 == 3
        text( ...
            Nc*1/2,...
            -12,...
            'Local Rotations',...
            'fontsize',16,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            -16,...
            6,...
            [num2str(rotation_range(1)*180/pi) '^\circ'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        text( ...
            Nc+16,...
            6,...
            [num2str(rotation_range(2)*180/pi) '^\circ'],...
            'fontsize',12,...
            'color','k',...
            'interpreter','tex',...
            'horizontalalign','center')
        
        
    end
    
end

end